name: ci-checks

on:
  push:
    branches: ['*']
    tags:
      - v*
  pull_request:
    type: [opened, reopened, edited]
  schedule:
    # run every night at midnight
    - cron:  '0 0 * * *'

jobs:
  ci-checks:
    name: '${{ matrix.task }} - python (${{ matrix.python-version }})'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.6'
        task:
          # - 'ci-checks'
          # - 'compilepy3'
          # - 'ci-packs-tests'
          # - 'ci-unit'
          - 'ci-integration'
    services:
      mongo:
        image: mongo:4.0
        ports:
          - 27017:27017
      rabbitmq:
        # use the -management version so it has the management tools installed
        image: rabbitmq:3.8-management
        ports:
          # SSL port
          - 5671:5671
          # standard port
          - 5672:5672
          # management port
          - 15672:15672
    env:
      TASK: '${{ matrix.task }}'
      
      # We need to explicitly specify terminal width otherwise some CLI tests fail on container
      # environments where small terminal size is used.
      COLUMNS: '120'
      PYLINT_CONCURRENCY: '2'
      
      # github-actions-specific st2.conf (with 'runner' user instead of stanley)
      ST2_CONF: 'conf/st2.githubactions.conf'

      # Tell StackStorm that we are indeed in CI mode, previously we hard coded a Travis specific
      # environment variable in our test code, making it a PITA when we switch CI providers.
      # Now, we simply set this environment varible here in the CI portion of our testing and
      # it avoids any CI provider type lock-in.
      #
      # Nick Debugging: turning off RabbitMQ tests for now
      ST2_CI: 'true'
    steps:
      - name: Custom Environment Setup
        # built-in GitHub Actions environment variables
        # https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables
        #
        # setting environment variables, so we can use shell logic
        # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
        run: |
          IS_NIGHTLY_BUILD=$([ "${GITHUB_EVENT_NAME}" = "schedule" ] && echo "yes" || echo "no")
          echo "IS_NIGHTLY_BUILD=${IS_NIGHTLY_BUILD}" >> $GITHUB_ENV
          
          # NOTE: We only enable coverage for master builds and not pull requests
          # since it has huge performance overhead (tests are 50% or so slower)
          ENABLE_COVERAGE=$([ "${GITHUB_EVENT_NAME}" != "pull_request" ] && [ "${IS_NIGHTLY_BUILD}" = "no" ] && echo "yes" || echo "no")
          echo "ENABLE_COVERAGE=${ENABLE_COVERAGE}" >> $GITHUB_ENV
          
          # We only run tests with "--with-timer" flag on master and not for PRs since it adds 1-2
          # minutes of overhead to each build.
          NOSE_TIME=$([ "${GITHUB_EVENT_NAME}" != "pull_request" ] && [ "${IS_NIGHTLY_BUILD}" = "no" ] && echo "yes" || echo "no")
          echo "NOSE_TIME=${NOSE_TIME}" >> $GITHUB_ENV
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: 'Set up Python (${{ matrix.python-version }})'
        uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python-version }}'
      - uses: actions/cache@v2
        with:
          path: |
            .cache/pip
            virtualenv
          key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'test-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python }}-
      - name: Install apt depedencies
        run: |
          # install dev dependencies for Python LDAP module
          # https://github.com/StackStorm/st2-auth-ldap
          sudo apt-get -y update
          sudo apt-get -y install libldap2-dev libsasl2-dev libssl-dev ldap-utils
      - name: Install virtualenv
        run: |
          # Note: Use the verison of virtualenv pinned in fixed-requirements.txt so we
          #       only have to update it one place when we change the version
          pip install --upgrade --force-reinstall $(grep "^virtualenv" fixed-requirements.txt)
      - name: Install requirements
        run: |
          ./scripts/travis/install-requirements.sh
      - name: Setup integration tests
        run: |
          # prep a travis-specific dev conf file that uses runner instead of stanley
          # this user is the username of the user in GitHub actions, used for SSH, etc during
          # integration tests (important)
          cp conf/st2.dev.conf "${ST2_CONF}" ; sed -i -e "s/stanley/runner/" "${ST2_CONF}"
          sudo scripts/travis/add-itest-user-key.sh
          sudo .circle/add-itest-user.sh
      - name: Permissions Workaround
        if: "${{ env.TASK == 'ci-packs-tests' || env.TASK == 'ci-integration' }}"
        run: |
          echo "$GITHUB_WORKSPACE"
          sudo GITHUB_WORKSPACE="${GITHUB_WORKSPACE}" scripts/travis/permissions-workaround.sh
      - name: Print versions
        run: |
          # Print various binary versions
          git --version
          pip --version
          pip list
          # Print out various environment variables info
          make play
      - name: make
        # use a login shell to help fix some python_runner tests
        shell: "bash --login {0}"
        run: |
          make ${TASK}
      - name: Setup tmate session for debugging failed jobs
        uses: mxschmitt/action-tmate@v3
        if: "${{ failure() }}"

      # - name: Nightly
      #   # Run any additional nightly checks only as part of a nightly (cron) build
      #   if: "${{ env.IS_NIGHTLY_BUILD == 'yes' }}"
      #   run: |
      #     ./scripts/travis/run-nightly-make-task-if-exists.sh "${TASK}"
      # - name: Codecov
      #   # NOTE: We only generate and submit coverage report for master and version branches and only when the build succeeds (default on GitHub Actions, this was not the case on Travis so we had to explicitly check success)
      #   if: "${{ success() && ((env.TASK == 'ci-unit') || (env.TASK == 'ci-integration')) && (env.ENABLE_COVERAGE == 'yes') }}"
      #   run: |
      #     ./scripts/travis/submit-codecov-coverage.sh
